---
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";

import Layout from "../../layouts/Layout.astro";
import Button from "../../components/Button.astro";
import ThreeJoker from "../../components/HeaderItems/ThreeJoker.astro";
import SnowPatrolCover from "../../assets/bandcover/snowPatrol.jpeg";
import KellyClarksonCover from "../../assets/bandcover/kellyClarkson.jpeg";
import NoDoubtCover from "../../assets/bandcover/noDoubt.jpg";
import FleetWoodMacCover from "../../assets/bandcover/fleetwoodMac.jpg";
import SnowPatrolMP3 from "../../assets/mp3s/snowPatrol.mp3";
import KellyClarksonMP3 from "../../assets/mp3s/kellyClarkson.mp3";
import NoDoubtMP3 from "../../assets/mp3s/noDoubt.mp3";
import FleetWoodMacMP3 from "../../assets/mp3s/fleetwoodMac.mp3";
---

<Layout title="Spielrunde 1">
  <ThreeJoker slot="left-headercol" />

  <div id="overlay" class="overlay">
    <div class="overlay-content">
      <div class="headline">Runde 1 / 3</div>
      <div class="subline">
        Klicken Sie auf das Albumcover und sortieren Sie die Alben mithilfe der Pfeile in die richtige Reihen-folge nach
        <span class="whiteText">Erscheinungsjahr: vorne das neueste, hinten das älteste. </span>
      </div>
      <div class="centerButton">
        <Button id="gameButton" buttonText="spielen" url="#" />
      </div>
    </div>
  </div>

  <div id="overlay2" class="overlay2">
    <div class="overlay2-content">
      <Icon name="clock" width={200} height={200} />
      <div class="headline">00:00</div>
      <div class="subline">Zeit ist abgelaufen!</div>
      <div class="centerButton">
        <Button buttonText="weiter" url="/results/result-one-false" />
      </div>
    </div>
  </div>

  <div class="introText">
    <div class="headline">Runde 1 / 3</div>
    <div class="subline">Sortieren Sie nach dem <span class="whiteText">Erscheinungsjahr!</span></div>
  </div>

  <div class="smallText">Älteste</div>

  <div class="coverflow">
    <div class="cover" data-band="SnowPatrol">
      <Picture src={SnowPatrolCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-SnowPatrol" src={SnowPatrolMP3} preload="none"></audio>
    </div>
    <div class="cover" data-band="KellyClarkson">
      <Picture src={KellyClarksonCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-KellyClarkson" src={KellyClarksonMP3} preload="none"></audio>
    </div>
    <div class="cover" data-band="NoDoubt">
      <Picture src={NoDoubtCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-NoDoubt" src={NoDoubtMP3} preload="none"></audio>
    </div>
    <div class="cover" data-band="FleetWoodMac">
      <Picture src={FleetWoodMacCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-FleetWoodMac" src={FleetWoodMacMP3} preload="none"></audio>
    </div>
    <div class="buttons">
      <div class="arrowButton" id="up">
        <Icon name="up-arrow" width={48} height={48} />
      </div>
      <div class="arrowButton" id="down">
        <Icon name="down-arrow" width={48} height={48} />
      </div>
    </div>

    <div class="hintText">Neueste</div>
  </div>

  <div class="timer">
    <Icon name="clock" width={48} height={48} />
    <span id="minutes">01</span>:<span id="seconds">00</span>

    <div class="finishButton">
      <Button url="/results/result-one" />
    </div>
  </div>
</Layout>

<style>
  .overlay,
  .overlay2 {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* ensures overlay is on top */
    visibility: hidden;
  }

  .overlay-content,
  .overlay2-content {
    display: flex;
    width: 366px;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-3);
  }

  .introText {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-15);
    margin-bottom: var(--spacing-spacing-md);
  }

  .headline {
    color: var(--colour-text-primary);
    leading-trim: both;
    text-edge: cap;
    font-size: 24px;
    font-style: normal;
    font-weight: 900;
    line-height: 120%; /* 28.8px */
    letter-spacing: 0.36px;
  }

  .subline {
    color: var(--colour-text-secondary, #aeaeae);
    leading-trim: both;
    text-edge: cap;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .whiteText {
    color: var(--colour-text-primary);
  }

  .smallText {
    color: var(--colour-text-BTN-inverted);
    text-align: center;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 35.28px;
  }

  .coverflow {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 400px;
    margin-bottom: var(--spacing-spacing-xl);
  }

  .cover {
    width: 114px;
    height: 114px;
    position: absolute;
  }

  .cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cover.selected {
    border-radius: var(--radius-radius-rounded);
    border: 8px solid var(--colour-border-secondary);
    transform: rotate(6.6deg);
  }

  .cover:nth-child(1) {
    width: 114px;
    height: 114px;
  }

  .cover:nth-child(2) {
    width: 160px;
    height: 160px;
    top: 2.5rem;
  }

  .cover:nth-child(3) {
    width: 214px;
    height: 214px;
    top: 5rem;
  }

  .cover:nth-child(4) {
    width: 300px;
    height: 300px;
    top: 7.5rem;
  }

  .buttons {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-spacing-xl);
    z-index: 3;
    bottom: 1rem;
    position: absolute;
  }

  .arrowButton {
    display: flex;
    padding: var(--spacing-1) var(--spacing-spacing-xs);
    justify-content: center;
    align-items: center;
    gap: var(--spacing-spacing-xxs);
    border-radius: var(--radius-radius-full);
    background: var(--colour-BTN-primary);
    cursor: pointer;
  }

  .arrowButton.disabled {
    background: var(--colour-BTN-disabled);
    pointer-events: none;
  }

  .hintText {
    position: absolute;
    bottom: -2rem;
    z-index: 4;
    border-radius: var(--radius-radius-full);
    background: var(--colour-BTN-inverted);
    display: flex;
    padding: var(--spacing-spacing-xxs) var(--spacing-spacing-md);
    justify-content: center;
    align-items: center;
    gap: var(--spacing-spacing-xxs);
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 35.28px;
    color: var(--colour-text-BTN-inverted);
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--spacing-spacing-md);
  }

  .finishButton {
    margin-left: var(--spacing-spacing-md);
  }

  .timer {
    padding: 24px 20px 23px 112px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    font-size: 40px;
    font-style: normal;
    font-weight: 900;
    line-height: normal;
    letter-spacing: 2px;
    color: var(--colour-text-primary);
  }
</style>
<script>
  let timeRemaining = 60;
  let timerInterval: number | null = null;

  const minutesElement = document.getElementById("minutes")!;
  const secondsElement = document.getElementById("seconds")!;
  const overlay2 = document.getElementById("overlay2");

  /**
   * Updates the timer display and checks if the timer has reached zero.
   * If the timer has reached zero, it hides the timer overlay.
   */
  function updateTime() {
    // Calculate minutes and seconds from the remaining time
    const minutes = Math.floor(timeRemaining / 60);
    const seconds = timeRemaining % 60;

    // Update the display with the formatted minutes and seconds
    minutesElement.textContent = String(minutes).padStart(2, "0");
    secondsElement.textContent = String(seconds).padStart(2, "0");

    // If the timer has reached zero, hide the timer overlay and stop the timer
    if (timeRemaining === 0) {
      clearInterval(timerInterval!);
      overlay2!.style.visibility = "visible";
    } else {
      // Otherwise, decrement the remaining time by one second
      timeRemaining--;
    }
  }

  /**
   * Starts the timer by setting an interval to call the updateTime function every second.
   */
  function startTimer() {
    // Set an interval to call the updateTime function every second
    timerInterval = window.setInterval(updateTime, 1000);
  }

  /**
   * Initializes the overlay by setting its visibility and adding a click event listener to the game button.
   * When the game button is clicked, it hides the overlay and starts the timer.
   */
  function initializeOverlay() {
    // Get the overlay and game button elements
    const overlay = document.getElementById("overlay");
    const gameButton = document.getElementById("gameButton");

    // Set the visibility of the overlay and overlay2 elements
    overlay!.style.visibility = "visible";
    overlay2!.style.visibility = "hidden";

    // Add a click event listener to the game button
    gameButton!.addEventListener("click", () => {
      // Hide the overlay and start the timer
      overlay!.style.visibility = "hidden";
      startTimer();
    });
  }

  /**
   * Updates the state of the up and down buttons based on the currently selected cover.
   *
   * @param {HTMLElement} selectedCover - The currently selected cover element.
   * @param {HTMLElement} upButton - The up button element.
   * @param {HTMLElement} downButton - The down button element.
   */
  function updateButtonState(selectedCover: HTMLElement, upButton: HTMLElement, downButton: HTMLElement) {
    // If no cover is selected, return early
    if (!selectedCover) return;

    // Get the parent element of the selected cover
    const parent = selectedCover.parentElement!;

    // Get the index of the selected cover within its parent element
    const index = Array.from(parent.children).indexOf(selectedCover);

    // If the selected cover is the first child, add the "disabled" class to the up button
    if (index === 0) {
      upButton.classList.add("disabled");
    } else {
      // Otherwise, remove the "disabled" class from the up button
      upButton.classList.remove("disabled");
    }

    // If the selected cover is the second to last child, add the "disabled" class to the down button
    if (index >= parent.children.length - 3) {
      downButton.classList.add("disabled");
    } else {
      // Otherwise, remove the "disabled" class from the down button
      downButton.classList.remove("disabled");
    }
  }

  /**
   * Initializes the covers and sets up their event listeners.
   */
  function initializeCovers() {
    // Initialize selected cover and covers elements
    let selectedCover: HTMLElement | null = null;
    let currentAudio: HTMLAudioElement | null = null;
    const covers = document.querySelectorAll<HTMLElement>(".cover");

    // Get up and down buttons
    const upButton = document.getElementById("up")!;
    const downButton = document.getElementById("down")!;

    // Add click event listener to each cover
    covers.forEach((cover) => {
      cover.addEventListener("click", () => {
        // Remove selected class from previously selected cover (if any)
        if (selectedCover) {
          selectedCover.classList.remove("selected");
        }
        // Pause the currently playing audio (if any)
        if (currentAudio) {
          currentAudio.pause();
          currentAudio.currentTime = 0; // Reset playback to start
        }

        // Set selected cover to newly clicked cover and add selected class
        selectedCover = cover;
        selectedCover.classList.add("selected");

        // Get the audio element associated with the selected cover
        const band = cover.getAttribute("data-band");
        currentAudio = document.getElementById(`audio-${band}`) as HTMLAudioElement | null;

        // Play the audio if it exists
        if (currentAudio) {
          currentAudio.play();
        }

        // Update button state
        updateButtonState(selectedCover, upButton, downButton);
      });
    });

    /**
     * Moves the selected cover in the specified direction.
     *
     * @param {number} direction - The direction to move the cover in. -1 for up, 1 for down.
     */
    function moveSelection(direction: number) {
      if (!selectedCover) return;

      const parent = selectedCover.parentElement!;
      const index = Array.from(parent.children).indexOf(selectedCover);
      const newIndex = index + direction;

      if (newIndex >= 0 && newIndex < parent.children.length) {
        const referenceNode = direction === -1 ? parent.children[newIndex] : parent.children[newIndex].nextSibling;
        parent.insertBefore(selectedCover, referenceNode);
        updateButtonState(selectedCover, upButton, downButton);
      }
    }

    // Add click event listeners to up and down buttons
    upButton.addEventListener("click", () => moveSelection(-1));
    downButton.addEventListener("click", () => moveSelection(1));
  }

  window.addEventListener("load", function () {
    initializeOverlay();
    initializeCovers();
  });
</script>
